"""empty message

Revision ID: d6a0655f832b
Revises: 
Create Date: 2025-04-27 14:29:32.547647

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd6a0655f832b'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('solr_synonym_lists',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('synonym', sa.String(length=50), nullable=False),
    sa.Column('synonym_list', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('synonym_type', sa.Enum('ADDRESS', 'NAME', 'ALL', name='syn_type'), nullable=False),
    sa.Column('last_update_date', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('solr_synonym_lists', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_solr_synonym_lists_synonym'), ['synonym'], unique=False)
        batch_op.create_index(batch_op.f('ix_solr_synonym_lists_synonym_type'), ['synonym_type'], unique=False)

    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=1000), nullable=False),
    sa.Column('firstname', sa.String(length=1000), nullable=True),
    sa.Column('lastname', sa.String(length=1000), nullable=True),
    sa.Column('email', sa.String(length=1000), nullable=True),
    sa.Column('login_source', sa.String(length=200), nullable=True),
    sa.Column('sub', sa.String(length=36), nullable=False),
    sa.Column('iss', sa.String(length=1024), nullable=False),
    sa.Column('unique_user_key', sa.String(length=256), nullable=False),
    sa.Column('creation_date', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_sub'), ['sub'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_unique_user_key'), ['unique_user_key'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=False)

    op.create_table('search_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('query', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('results', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('search_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('submitter_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['submitter_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('solr_docs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('doc', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('entity_id', sa.String(length=50), nullable=False),
    sa.Column('submission_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('submitter_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['submitter_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('solr_docs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_solr_docs_entity_id'), ['entity_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_solr_docs_submission_date'), ['submission_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_solr_docs_submitter_id'), ['submitter_id'], unique=False)

    op.create_table('solr_doc_events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('event_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('event_last_update', sa.DateTime(timezone=True), nullable=False),
    sa.Column('event_status', sa.Enum('COMPLETE', 'ERROR', 'PENDING', name='event_status'), nullable=False),
    sa.Column('event_type', sa.Enum('RESYNC', 'UPDATE', name='event_type'), nullable=False),
    sa.Column('solr_doc_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['solr_doc_id'], ['solr_docs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('solr_doc_events', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_solr_doc_events_event_status'), ['event_status'], unique=False)
        batch_op.create_index(batch_op.f('ix_solr_doc_events_solr_doc_id'), ['solr_doc_id'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('solr_doc_events', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_solr_doc_events_solr_doc_id'))
        batch_op.drop_index(batch_op.f('ix_solr_doc_events_event_status'))

    op.drop_table('solr_doc_events')
    with op.batch_alter_table('solr_docs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_solr_docs_submitter_id'))
        batch_op.drop_index(batch_op.f('ix_solr_docs_submission_date'))
        batch_op.drop_index(batch_op.f('ix_solr_docs_entity_id'))

    op.drop_table('solr_docs')
    op.drop_table('search_history')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_unique_user_key'))
        batch_op.drop_index(batch_op.f('ix_users_sub'))

    op.drop_table('users')
    with op.batch_alter_table('solr_synonym_lists', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_solr_synonym_lists_synonym_type'))
        batch_op.drop_index(batch_op.f('ix_solr_synonym_lists_synonym'))

    op.drop_table('solr_synonym_lists')
    # ### end Alembic commands ###
